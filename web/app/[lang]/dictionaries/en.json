{
  "metadata": {
    "title": "2DNS - DNS Reflection Server",
    "description": "A versatile DNS reflection server that allows you to encode IP addresses in domain names and have them reflected back in DNS responses."
  },
  "common": {
    "brand": "2DNS",
    "learnMore": "Learn More",
    "getStarted": "Get Started",
    "tryItNow": "Try It Now"
  },
  "navigation": {
    "features": "Features",
    "howItWorks": "How It Works",
    "encodingExplained": "Base32 Encoding",
    "try": "Try It",
    "contact": "Contact Us"
  },
  "hero": {
    "title": "DNS Reflection Server",
    "subtitle": "Encode IPs in domain names, get them back in DNS responses",
    "description": "2DNS is a versatile DNS reflection server that allows you to encode IP addresses in domain names and have them reflected back in DNS responses. Perfect for networking applications, diagnostics, and DNS-based service discovery.",
    "cta": "Try It Now",
    "secondaryCta": "Learn More"
  },
  "features": {
    "title": "Features",
    "subtitle": "Powerful DNS reflection capabilities",
    "list": [
      {
        "title": "IPv4 & IPv6 Support",
        "description": "Full support for both IPv4 and IPv6 addresses with multiple encoding formats."
      },
      {
        "title": "Multiple Encoding Formats",
        "description": "Direct reflection, Base32 encoding, and special formats for IPv6 including zero-group compression."
      },
      {
        "title": "Dual-Stack Support",
        "description": "Encode both IPv4 and IPv6 addresses in a single domain for dual-stack environments."
      },
      {
        "title": "High Compatibility",
        "description": "Runs on multiple ports and network types for maximum compatibility across different environments."
      }
    ]
  },
  "howItWorks": {
    "title": "How It Works",
    "subtitle": "Simple DNS reflection in action",
    "steps": [
      {
        "title": "Encode IP in Domain",
        "description": "Format your IP address according to one of the supported encoding formats and append it to the 2dns.dev domain."
      },
      {
        "title": "Send DNS Query",
        "description": "Use standard DNS tools like dig or nslookup to query the encoded domain name against our DNS server."
      },
      {
        "title": "Server Processes Query",
        "description": "Our server parses the domain name, extracts the encoded IP address, and prepares the appropriate DNS response."
      },
      {
        "title": "Receive IP in Response",
        "description": "The DNS response contains the extracted IP address as an A record (for IPv4) or AAAA record (for IPv6)."
      }
    ]
  },
  "encodingExplained": {
    "title": "Base32 Encoding Explained",
    "subtitle": "How 2DNS encodes IP addresses using Base32",
    "base32Title": "Understanding Base32 Encoding",
    "base32Description": "Base32 encoding is a method of representing binary data using a set of 32 ASCII characters (A-Z and 2-7). In 2DNS, we use Base32 to encode IP addresses in a format that's safe for DNS domain names, replacing the standard padding character '=' with '8'.",
    "ipv4Title": "Base32 Encoding for IPv4",
    "ipv4Description": "An IPv4 address consists of 4 bytes (32 bits). When encoded in Base32, it produces an 8-character string. This compact representation is perfect for embedding in domain names.",
    "ipv4Example": "Example: 1.2.3.4 → AEBAGBA8 (Base32 encoded)\n\nProcess:\n1. Convert IPv4 address to bytes: [1, 2, 3, 4]\n2. Encode bytes using Base32: \"AEBAGBAA\"\n3. Replace trailing padding '=' with '8': \"AEBAGBA8\"",
    "ipv6Title": "Base32 Encoding for IPv6",
    "ipv6Description": "An IPv6 address consists of 16 bytes (128 bits). When encoded in Base32, it produces a 32-character string, which is longer but still manageable in domain names.",
    "ipv6Example": "Example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334 → EAAQ3OEFUMAAAAAARIXAG4DTGQ888888 (Base32 encoded)\n\nProcess:\n1. Convert IPv6 address to bytes: [32, 1, 13, 184, 133, 163, 0, 0, 0, 0, 138, 46, 3, 112, 115, 52]\n2. Encode bytes using Base32: \"EAAQ3OEFUMAAAAAARIXAG4DTGQ======\"\n3. Replace trailing padding '=' with '8': \"EAAQ3OEFUMAAAAAARIXAG4DTGQ888888\"",
    "dualStackLabel": "Dual Stack",
    "dualStackTitle": "Dual Stack Encoding",
    "dualStackDescription": "For environments that support both IPv4 and IPv6, 2DNS allows encoding both addresses in a single domain name. The first 8 characters represent the IPv4 address, and the remaining characters represent the IPv6 address.",
    "dualStackExample": "Example: IPv4 (1.2.3.4) + IPv6 (2001:0db8:85a3::8a2e:370:7334)\n→ AEBAGBA8EAAQ3OEFUMAAAAAARIXAG4DTGQ888888\n\nWhen queried with A record: Returns 1.2.3.4\nWhen queried with AAAA record: Returns 2001:0db8:85a3::8a2e:370:7334",
    "codeExamplesTitle": "Implementation Examples",
    "pythonExample": "import base64\nimport ipaddress\n\ndef ipv4_to_base32(ip_str):\n    \"\"\"Convert an IPv4 address to Base32 encoding.\"\"\"\n    # Parse the IP address\n    ip = ipaddress.IPv4Address(ip_str)\n    # Convert to bytes\n    ip_bytes = ip.packed\n    # Encode to Base32\n    encoded = base64.b32encode(ip_bytes).decode('ascii')\n    # Replace padding with '8'\n    return encoded.rstrip('=').ljust(len(encoded), '8')\n\ndef ipv6_to_base32(ip_str):\n    \"\"\"Convert an IPv6 address to Base32 encoding.\"\"\"\n    # Parse the IP address\n    ip = ipaddress.IPv6Address(ip_str)\n    # Convert to bytes\n    ip_bytes = ip.packed\n    # Encode to Base32\n    encoded = base64.b32encode(ip_bytes).decode('ascii')\n    # Replace padding with '8'\n    return encoded.rstrip('=').ljust(len(encoded), '8')\n\ndef dual_stack_to_base32(ipv4_str, ipv6_str):\n    \"\"\"Create a dual-stack Base32 encoding.\"\"\"\n    return ipv4_to_base32(ipv4_str) + ipv6_to_base32(ipv6_str)\n\n# Examples\nipv4 = \"1.2.3.4\"\nipv6 = \"2001:0db8:85a3::8a2e:370:7334\"\n\nprint(f\"IPv4 Base32: {ipv4_to_base32(ipv4)}\")\nprint(f\"IPv6 Base32: {ipv6_to_base32(ipv6)}\")\nprint(f\"Dual Stack Base32: {dual_stack_to_base32(ipv4, ipv6)}\")",
    "javascriptExample": "// Requires 'buffer' in Node.js or a Buffer polyfill in browsers\n\nfunction ipv4ToBase32(ipStr) {\n  // Parse the IP address\n  const parts = ipStr.split('.');\n  if (parts.length !== 4) {\n    throw new Error('Invalid IPv4 address');\n  }\n  \n  // Convert to bytes\n  const bytes = new Uint8Array(4);\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = parseInt(parts[i], 10);\n  }\n  \n  // Encode to Base32\n  const encoded = Buffer.from(bytes).toString('base32');\n  \n  // Replace padding with '8'\n  return encoded.replace(/=/g, '8');\n}\n\nfunction ipv6ToBase32(ipStr) {\n  // Parse the IPv6 address\n  // This is a simplified version - in production, use a proper IPv6 parser\n  const normalized = normalizeIPv6(ipStr);\n  const bytes = new Uint8Array(16);\n  \n  // Convert to bytes (simplified)\n  const groups = normalized.split(':');\n  for (let i = 0; i < 8; i++) {\n    const value = parseInt(groups[i], 16);\n    bytes[i * 2] = (value >> 8) & 0xff;\n    bytes[i * 2 + 1] = value & 0xff;\n  }\n  \n  // Encode to Base32\n  const encoded = Buffer.from(bytes).toString('base32');\n  \n  // Replace padding with '8'\n  return encoded.replace(/=/g, '8');\n}\n\nfunction dualStackToBase32(ipv4Str, ipv6Str) {\n  return ipv4ToBase32(ipv4Str) + ipv6ToBase32(ipv6Str);\n}\n\n// Helper function to normalize IPv6 address (simplified)\nfunction normalizeIPv6(ipStr) {\n  // This is a simplified version - in production, use a proper IPv6 parser\n  let expanded = ipStr;\n  \n  // Handle :: compression\n  if (expanded.includes('::')) {\n    const parts = expanded.split('::');\n    const left = parts[0] ? parts[0].split(':') : [];\n    const right = parts[1] ? parts[1].split(':') : [];\n    const missing = 8 - left.length - right.length;\n    const middle = Array(missing).fill('0');\n    expanded = [...left, ...middle, ...right].join(':');\n  }\n  \n  // Ensure 8 groups\n  const groups = expanded.split(':');\n  return groups\n    .map(g => g.padStart(4, '0'))\n    .join(':');\n}\n\n// Examples\nconst ipv4 = \"1.2.3.4\";\nconst ipv6 = \"2001:db8:85a3::8a2e:370:7334\";\n\nconsole.log(`IPv4 Base32: ${ipv4ToBase32(ipv4)}`);\nconsole.log(`IPv6 Base32: ${ipv6ToBase32(ipv6)}`);\nconsole.log(`Dual Stack Base32: ${dualStackToBase32(ipv4, ipv6)}`);\n",
    "typescriptExample": "// Requires 'buffer' in Node.js or a Buffer polyfill in browsers\n\nfunction ipv4ToBase32(ipStr: string): string {\n  // Parse the IP address\n  const parts = ipStr.split('.');\n  if (parts.length !== 4) {\n    throw new Error('Invalid IPv4 address');\n  }\n  \n  // Convert to bytes\n  const bytes = new Uint8Array(4);\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = parseInt(parts[i], 10);\n  }\n  \n  // Encode to Base32\n  const encoded = Buffer.from(bytes).toString('base32');\n  \n  // Replace padding with '8'\n  return encoded.replace(/=/g, '8');\n}\n\nfunction ipv6ToBase32(ipStr: string): string {\n  // Parse the IPv6 address\n  // This is a simplified version - in production, use a proper IPv6 parser\n  const normalized = normalizeIPv6(ipStr);\n  const bytes = new Uint8Array(16);\n  \n  // Convert to bytes (simplified)\n  const groups = normalized.split(':');\n  for (let i = 0; i < 8; i++) {\n    const value = parseInt(groups[i], 16);\n    bytes[i * 2] = (value >> 8) & 0xff;\n    bytes[i * 2 + 1] = value & 0xff;\n  }\n  \n  // Encode to Base32\n  const encoded = Buffer.from(bytes).toString('base32');\n  \n  // Replace padding with '8'\n  return encoded.replace(/=/g, '8');\n}\n\nfunction dualStackToBase32(ipv4Str: string, ipv6Str: string): string {\n  return ipv4ToBase32(ipv4Str) + ipv6ToBase32(ipv6Str);\n}\n\n// Helper function to normalize IPv6 address (simplified)\nfunction normalizeIPv6(ipStr: string): string {\n  // This is a simplified version - in production, use a proper IPv6 parser\n  let expanded = ipStr;\n  \n  // Handle :: compression\n  if (expanded.includes('::')) {\n    const parts = expanded.split('::');\n    const left = parts[0] ? parts[0].split(':') : [];\n    const right = parts[1] ? parts[1].split(':') : [];\n    const missing = 8 - left.length - right.length;\n    const middle = Array(missing).fill('0');\n    expanded = [...left, ...middle, ...right].join(':');\n  }\n  \n  // Ensure 8 groups\n  const groups = expanded.split(':');\n  return groups\n    .map(g => g.padStart(4, '0'))\n    .join(':');\n}\n\n// Examples\nconst ipv4 = \"1.2.3.4\";\nconst ipv6 = \"2001:db8:85a3::8a2e:370:7334\";\n\nconsole.log(`IPv4 Base32: ${ipv4ToBase32(ipv4)}`);\nconsole.log(`IPv6 Base32: ${ipv6ToBase32(ipv6)}`);\nconsole.log(`Dual Stack Base32: ${dualStackToBase32(ipv4, ipv6)}`);\n",
    "goExample": "package main\n\nimport (\n\t\"encoding/base32\"\n\t\"fmt\"\n\t\"net\"\n\t\"strings\"\n)\n\n// IPv4ToBase32 converts an IPv4 address to Base32 encoding\nfunc IPv4ToBase32(ipStr string) (string, error) {\n\t// Parse the IP address\n\tip := net.ParseIP(ipStr)\n\tif ip == nil {\n\t\treturn \"\", fmt.Errorf(\"invalid IP address: %s\", ipStr)\n\t}\n\t\n\t// Ensure it's an IPv4 address\n\tipv4 := ip.To4()\n\tif ipv4 == nil {\n\t\treturn \"\", fmt.Errorf(\"not an IPv4 address: %s\", ipStr)\n\t}\n\t\n\t// Encode to Base32\n\tencoded := base32.StdEncoding.EncodeToString(ipv4)\n\t\n\t// Replace padding with '8'\n\treturn strings.ReplaceAll(encoded, \"=\", \"8\"), nil\n}\n\n// IPv6ToBase32 converts an IPv6 address to Base32 encoding\nfunc IPv6ToBase32(ipStr string) (string, error) {\n\t// Parse the IP address\n\tip := net.ParseIP(ipStr)\n\tif ip == nil {\n\t\treturn \"\", fmt.Errorf(\"invalid IP address: %s\", ipStr)\n\t}\n\t\n\t// Ensure it's an IPv6 address\n\tipv6 := ip.To16()\n\tif ipv6 == nil || ip.To4() != nil {\n\t\treturn \"\", fmt.Errorf(\"not an IPv6 address: %s\", ipStr)\n\t}\n\t\n\t// Encode to Base32\n\tencoded := base32.StdEncoding.EncodeToString(ipv6)\n\t\n\t// Replace padding with '8'\n\treturn strings.ReplaceAll(encoded, \"=\", \"8\"), nil\n}\n\n// DualStackToBase32 creates a dual-stack Base32 encoding\nfunc DualStackToBase32(ipv4Str, ipv6Str string) (string, error) {\n\tipv4Encoded, err := IPv4ToBase32(ipv4Str)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\t\n\tipv6Encoded, err := IPv6ToBase32(ipv6Str)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\t\n\treturn ipv4Encoded + ipv6Encoded, nil\n}\n\nfunc main() {\n\tipv4 := \"1.2.3.4\"\n\tipv6 := \"2001:0db8:85a3::8a2e:370:7334\"\n\t\n\tipv4Encoded, _ := IPv4ToBase32(ipv4)\n\tipv6Encoded, _ := IPv6ToBase32(ipv6)\n\tdualStackEncoded, _ := DualStackToBase32(ipv4, ipv6)\n\t\n\tfmt.Printf(\"IPv4 Base32: %s\\n\", ipv4Encoded)\n\tfmt.Printf(\"IPv6 Base32: %s\\n\", ipv6Encoded)\n\tfmt.Printf(\"Dual Stack Base32: %s\\n\", dualStackEncoded)\n}",
    "javaExample": "import java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.Base64;\n\npublic class DNS2Base32 {\n\n    public static String ipv4ToBase32(String ipStr) throws UnknownHostException {\n        // Parse the IP address\n        InetAddress ip = InetAddress.getByName(ipStr);\n        \n        // Ensure it's an IPv4 address\n        if (!(ip instanceof java.net.Inet4Address)) {\n            throw new IllegalArgumentException(\"Not an IPv4 address: \" + ipStr);\n        }\n        \n        // Get the raw bytes\n        byte[] ipBytes = ip.getAddress();\n        \n        // Encode to Base32\n        String encoded = Base64.getEncoder().encodeToString(ipBytes);\n        \n        // Replace padding with '8'\n        return encoded.replace(\"=\", \"8\");\n    }\n    \n    public static String ipv6ToBase32(String ipStr) throws UnknownHostException {\n        // Parse the IP address\n        InetAddress ip = InetAddress.getByName(ipStr);\n        \n        // Ensure it's an IPv6 address\n        if (!(ip instanceof java.net.Inet6Address)) {\n            throw new IllegalArgumentException(\"Not an IPv6 address: \" + ipStr);\n        }\n        \n        // Get the raw bytes\n        byte[] ipBytes = ip.getAddress();\n        \n        // Encode to Base32\n        String encoded = Base64.getEncoder().encodeToString(ipBytes);\n        \n        // Replace padding with '8'\n        return encoded.replace(\"=\", \"8\");\n    }\n    \n    public static String dualStackToBase32(String ipv4Str, String ipv6Str) throws UnknownHostException {\n        return ipv4ToBase32(ipv4Str) + ipv6ToBase32(ipv6Str);\n    }\n    \n    public static void main(String[] args) {\n        try {\n            String ipv4 = \"1.2.3.4\";\n            String ipv6 = \"2001:0db8:85a3::8a2e:370:7334\";\n            \n            System.out.println(\"IPv4 Base32: \" + ipv4ToBase32(ipv4));\n            System.out.println(\"IPv6 Base32: \" + ipv6ToBase32(ipv6));\n            System.out.println(\"Dual Stack Base32: \" + dualStackToBase32(ipv4, ipv6));\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  "demo": {
    "title": "Try DNS Reflection",
    "subtitle": "See how 2DNS works with your IP addresses",
    "description": "Enter an IP address and select a format to generate a DNS query command.",
    "ipLabel": "IP Address",
    "ipPlaceholder": "Enter IPv4 or IPv6 address",
    "formatLabel": "Query Format",
    "commandTypeLabel": "Command Type",
    "commandTypes": [
      { "id": "dig", "name": "dig" },
      { "id": "host", "name": "host" },
      { "id": "doh", "name": "DNS over HTTPS" }
    ],
    "doh": {
      "title": "DNS over HTTPS",
      "providerLabel": "DOH Provider",
      "customEndpointLabel": "Custom Endpoint",
      "customEndpointPlaceholder": "Enter custom DOH endpoint URL",
      "runButton": "Run Query",
      "loadingMessage": "Running query...",
      "resultTitle": "DOH Query Result",
      "providers": [
        { "id": "cloudflare", "name": "Cloudflare" },
        { "id": "google", "name": "Google" },
        { "id": "custom", "name": "Custom" }
      ],
      "endpointLabel": "Endpoint"
    },
    "formats": [
      { "id": "direct-ipv4", "name": "Direct IPv4 Reflection" },
      { "id": "ipv6-complete", "name": "IPv6 Complete Format" },
      { "id": "ipv6-omit", "name": "IPv6 with Omitted Zeros" },
      { "id": "ipv6-z", "name": "IPv6 with 'z' for Zero Groups" },
      { "id": "base32-ipv4", "name": "Base32 Encoded IPv4" },
      { "id": "base32-ipv6", "name": "Base32 Encoded IPv6" },
      { "id": "dual-stack", "name": "Dual-Stack (IPv4 + IPv6)" }
    ],
    "generateButton": "Generate DNS Query",
    "resultTitle": "DNS Query Command",
    "responseTitle": "Expected Response",
    "copyButton": "Copy",
    "copiedMessage": "Copied to clipboard!",
    "instructions": {
      "title": "How to use",
      "steps": [
        "Enter an IPv4 or IPv6 address",
        "Select a query format",
        "Choose command type (dig, host, or DNS over HTTPS)",
        "For dig/host: Click 'Generate DNS Query' and copy the command",
        "For DNS over HTTPS: Select a provider and click 'Run Query' to see results directly"
      ]
    },
    "examples": {
      "title": "Examples",
      "items": [
        {
          "format": "Direct IPv4",
          "commands": {
            "dig": "dig 1.2.3.4.2dns.dev A",
            "host": "host -t A 1.2.3.4.2dns.dev",
            "doh": "Using Cloudflare DOH to query 1.2.3.4.2dns.dev"
          },
          "response": "Returns 1.2.3.4 as an A record"
        },
        {
          "format": "IPv6 Complete",
          "commands": {
            "dig": "dig 2001-0db8-85a3-0000-0000-8a2e-0370-7334.2dns.dev AAAA",
            "host": "host -t AAAA 2001-0db8-85a3-0000-0000-8a2e-0370-7334.2dns.dev",
            "doh": "Using Cloudflare DOH to query 2001-0db8-85a3-0000-0000-8a2e-0370-7334.2dns.dev"
          },
          "response": "Returns 2001:0db8:85a3:0000:0000:8a2e:0370:7334 as an AAAA record"
        },
        {
          "format": "IPv6 with Omitted Zeros",
          "commands": {
            "dig": "dig 2001-db8-85a3-0-0-8a2e-370-7334.2dns.dev AAAA",
            "host": "host -t AAAA 2001-db8-85a3-0-0-8a2e-370-7334.2dns.dev",
            "doh": "Using Cloudflare DOH to query 2001-db8-85a3-0-0-8a2e-370-7334.2dns.dev"
          },
          "response": "Returns 2001:0db8:85a3:0000:0000:8a2e:0370:7334 as an AAAA record"
        },
        {
          "format": "IPv6 with 'z' for Zero Groups",
          "commands": {
            "dig": "dig 2001-db8-85a3-z-8a2e-370-7334.2dns.dev AAAA",
            "host": "host -t AAAA 2001-db8-85a3-z-8a2e-370-7334.2dns.dev",
            "doh": "Using Cloudflare DOH to query 2001-db8-85a3-z-8a2e-370-7334.2dns.dev"
          },
          "response": "Returns 2001:0db8:85a3:0000:0000:8a2e:0370:7334 as an AAAA record"
        },
        {
          "format": "Base32 Encoded IPv4",
          "commands": {
            "dig": "dig AEBAGBA8.2dns.dev A",
            "host": "host -t A AEBAGBA8.2dns.dev",
            "doh": "Using Cloudflare DOH to query AEBAGBA8.2dns.dev"
          },
          "response": "Returns 1.2.3.4 as an A record"
        },
        {
          "format": "Base32 Encoded IPv6",
          "commands": {
            "dig": "dig EAAQ3OEFUMAAAAAARIXAG4DTGQ888888.2dns.dev AAAA",
            "host": "host -t AAAA EAAQ3OEFUMAAAAAARIXAG4DTGQ888888.2dns.dev",
            "doh": "Using Cloudflare DOH to query EAAQ3OEFUMAAAAAARIXAG4DTGQ888888.2dns.dev"
          },
          "response": "Returns 2001:0db8:85a3:0000:0000:8a2e:0370:7334 as an AAAA record"
        },
        {
          "format": "Dual-Stack (IPv4 + IPv6)",
          "commands": {
            "dig": "dig AEBAGBA8EAAQ3OEFUMAAAAAARIXAG4DTGQ888888.2dns.dev A+AAAA",
            "host": "host -t A+AAAA AEBAGBA8EAAQ3OEFUMAAAAAARIXAG4DTGQ888888.2dns.dev",
            "doh": "Using Cloudflare DOH to query AEBAGBA8EAAQ3OEFUMAAAAAARIXAG4DTGQ888888.2dns.dev"
          },
          "response": "Returns 1.2.3.4 as an A record and 2001:0db8:85a3:0000:0000:8a2e:0370:7334 as an AAAA record"
        }
      ]
    }
  },
  "testimonials": {
    "title": "What Our Users Say",
    "subtitle": "Trusted by developers worldwide",
    "list": [
      {
        "quote": "2DNS has simplified our network diagnostics and service discovery. A brilliant tool!",
        "author": "John Doe",
        "role": "Network Engineer"
      },
      {
        "quote": "We use 2DNS for our IoT device discovery and it works flawlessly across IPv4 and IPv6 networks.",
        "author": "Jane Smith",
        "role": "IoT Developer"
      },
      {
        "quote": "The multiple encoding formats are genius. Perfect for our mixed network environment.",
        "author": "Mike Johnson",
        "role": "System Administrator"
      }
    ]
  },
  "pricing": {
    "title": "Pricing",
    "subtitle": "Simple and transparent pricing",
    "plans": [
      {
        "name": "Free",
        "price": "$0",
        "period": "forever",
        "description": "For personal projects and small teams",
        "features": ["Public 2dns.dev service", "All encoding formats", "Community support"],
        "cta": "Get Started"
      },
      {
        "name": "Pro",
        "price": "$19",
        "period": "per month",
        "description": "For growing teams and businesses",
        "features": ["Private DNS reflection server", "Custom domain support", "Priority support", "Advanced analytics"],
        "cta": "Start Free Trial"
      },
      {
        "name": "Enterprise",
        "price": "Custom",
        "period": "",
        "description": "For large organizations with custom needs",
        "features": [
          "Multiple private instances",
          "Custom encoding formats",
          "Dedicated support",
          "Custom integration",
          "SLA guarantees"
        ],
        "cta": "Contact Sales"
      }
    ]
  },
  "cta": {
    "title": "Ready to Get Started?",
    "description": "Join developers worldwide who are using 2DNS for network applications, diagnostics, and service discovery.",
    "primaryButton": "Try It Now",
    "secondaryButton": "Contact Us"
  },
  "footer": {
    "rights": "All rights reserved.",
    "privacy": "Privacy Policy",
    "terms": "Terms of Service"
  }
}
