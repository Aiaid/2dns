{
  "metadata": {
    "title": "2DNS - DNS反射服务器",
    "description": "一个多功能的DNS反射服务器，允许您在域名中编码IP地址，并在DNS响应中将其反射回来。"
  },
  "common": {
    "brand": "2DNS",
    "learnMore": "了解更多",
    "getStarted": "立即开始",
    "tryItNow": "立即尝试"
  },
  "navigation": {
    "features": "功能特点",
    "howItWorks": "工作原理",
    "encodingExplained": "Base32编码",
    "try": "立即体验",
    "contact": "联系我们"
  },
  "hero": {
    "title": "DNS反射服务器",
    "subtitle": "在域名中编码IP地址，在DNS响应中获取它们",
    "description": "2DNS是一个多功能的DNS反射服务器，允许您在域名中编码IP地址，并在DNS响应中将其反射回来。适用于各种网络应用、诊断和基于DNS的服务发现。",
    "cta": "立即尝试",
    "secondaryCta": "了解更多"
  },
  "features": {
    "title": "功能特点",
    "subtitle": "强大的DNS反射功能",
    "list": [
      {
        "title": "IPv4和IPv6支持",
        "description": "完全支持IPv4和IPv6地址，提供多种编码格式。"
      },
      {
        "title": "多种编码格式",
        "description": "直接反射、Base32编码，以及IPv6的特殊格式，包括零组压缩。"
      },
      {
        "title": "双栈支持",
        "description": "在单个域名中同时编码IPv4和IPv6地址，适用于双栈环境。"
      },
      {
        "title": "高兼容性",
        "description": "在多个端口和网络类型上运行，确保在不同环境中的最大兼容性。"
      }
    ]
  },
  "howItWorks": {
    "title": "工作原理",
    "subtitle": "简单的DNS反射过程",
    "steps": [
      {
        "title": "在域名中编码IP",
        "description": "根据支持的编码格式之一格式化您的IP地址，并将其附加到2dns.dev域名。"
      },
      {
        "title": "发送DNS查询",
        "description": "使用标准DNS工具（如dig或nslookup）向我们的DNS服务器查询编码的域名。"
      },
      {
        "title": "服务器处理查询",
        "description": "我们的服务器解析域名，提取编码的IP地址，并准备适当的DNS响应。"
      },
      {
        "title": "在响应中接收IP",
        "description": "DNS响应包含提取的IP地址，作为A记录（IPv4）或AAAA记录（IPv6）。"
      }
    ]
  },
  "encodingExplained": {
    "title": "Base32编码详解",
    "subtitle": "2DNS如何使用Base32编码IP地址",
    "base32Title": "理解Base32编码",
    "base32Description": "Base32编码是一种使用32个ASCII字符（A-Z和2-7）表示二进制数据的方法。在2DNS中，我们使用Base32编码IP地址，使其适合DNS域名格式，并将标准填充字符'='替换为'8'。",
    "ipv4Title": "IPv4的Base32编码",
    "ipv4Description": "IPv4地址由4个字节（32位）组成。使用Base32编码后，会生成一个8字符的字符串。这种紧凑的表示形式非常适合嵌入到域名中。",
    "ipv4Example": "示例：1.2.3.4 → AEBAGBA8（Base32编码）\n\n过程：\n1. 将IPv4地址转换为字节：[1, 2, 3, 4]\n2. 使用Base32编码字节：\"AEBAGBAA\"\n3. 将尾部填充'='替换为'8'：\"AEBAGBA8\"",
    "ipv6Title": "IPv6的Base32编码",
    "ipv6Description": "IPv6地址由16个字节（128位）组成。使用Base32编码后，会生成一个32字符的字符串，虽然较长但在域名中仍然可以管理。",
    "ipv6Example": "示例：2001:0db8:85a3:0000:0000:8a2e:0370:7334 → EAAQ3OEFUMAAAAAARIXAG4DTGQ888888（Base32编码）\n\n过程：\n1. 将IPv6地址转换为字节：[32, 1, 13, 184, 133, 163, 0, 0, 0, 0, 138, 46, 3, 112, 115, 52]\n2. 使用Base32编码字节：\"EAAQ3OEFUMAAAAAARIXAG4DTGQ======\"\n3. 将尾部填充'='替换为'8'：\"EAAQ3OEFUMAAAAAARIXAG4DTGQ888888\"",
    "dualStackLabel": "双栈",
    "dualStackTitle": "双栈编码",
    "dualStackDescription": "对于同时支持IPv4和IPv6的环境，2DNS允许在单个域名中编码两种地址。前8个字符表示IPv4地址，剩余字符表示IPv6地址。",
    "dualStackExample": "示例：IPv4（1.2.3.4）+ IPv6（2001:0db8:85a3::8a2e:370:7334）\n→ AEBAGBA8EAAQ3OEFUMAAAAAARIXAG4DTGQ888888\n\n使用A记录查询时：返回1.2.3.4\n使用AAAA记录查询时：返回2001:0db8:85a3::8a2e:370:7334",
    "codeExamplesTitle": "实现示例",
    "pythonExample": "import base64\nimport ipaddress\n\ndef ipv4_to_base32(ip_str):\n    \"\"\"将IPv4地址转换为Base32编码。\"\"\"\n    # 解析IP地址\n    ip = ipaddress.IPv4Address(ip_str)\n    # 转换为字节\n    ip_bytes = ip.packed\n    # 编码为Base32\n    encoded = base64.b32encode(ip_bytes).decode('ascii')\n    # 将填充替换为'8'\n    return encoded.rstrip('=').ljust(len(encoded), '8')\n\ndef ipv6_to_base32(ip_str):\n    \"\"\"将IPv6地址转换为Base32编码。\"\"\"\n    # 解析IP地址\n    ip = ipaddress.IPv6Address(ip_str)\n    # 转换为字节\n    ip_bytes = ip.packed\n    # 编码为Base32\n    encoded = base64.b32encode(ip_bytes).decode('ascii')\n    # 将填充替换为'8'\n    return encoded.rstrip('=').ljust(len(encoded), '8')\n\ndef dual_stack_to_base32(ipv4_str, ipv6_str):\n    \"\"\"创建双栈Base32编码。\"\"\"\n    return ipv4_to_base32(ipv4_str) + ipv6_to_base32(ipv6_str)\n\n# 示例\nipv4 = \"1.2.3.4\"\nipv6 = \"2001:0db8:85a3::8a2e:370:7334\"\n\nprint(f\"IPv4 Base32: {ipv4_to_base32(ipv4)}\")\nprint(f\"IPv6 Base32: {ipv6_to_base32(ipv6)}\")\nprint(f\"双栈 Base32: {dual_stack_to_base32(ipv4, ipv6)}\")",
    "javascriptExample": "// 在Node.js中需要'buffer'或在浏览器中需要Buffer polyfill\n\nfunction ipv4ToBase32(ipStr) {\n  // 解析IP地址\n  const parts = ipStr.split('.');\n  if (parts.length !== 4) {\n    throw new Error('无效的IPv4地址');\n  }\n  \n  // 转换为字节\n  const bytes = new Uint8Array(4);\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = parseInt(parts[i], 10);\n  }\n  \n  // 编码为Base32\n  const encoded = Buffer.from(bytes).toString('base32');\n  \n  // 将填充替换为'8'\n  return encoded.replace(/=/g, '8');\n}\n\nfunction ipv6ToBase32(ipStr) {\n  // 解析IPv6地址\n  // 这是一个简化版本 - 在生产环境中，请使用适当的IPv6解析器\n  const normalized = normalizeIPv6(ipStr);\n  const bytes = new Uint8Array(16);\n  \n  // 转换为字节（简化）\n  const groups = normalized.split(':');\n  for (let i = 0; i < 8; i++) {\n    const value = parseInt(groups[i], 16);\n    bytes[i * 2] = (value >> 8) & 0xff;\n    bytes[i * 2 + 1] = value & 0xff;\n  }\n  \n  // 编码为Base32\n  const encoded = Buffer.from(bytes).toString('base32');\n  \n  // 将填充替换为'8'\n  return encoded.replace(/=/g, '8');\n}\n\nfunction dualStackToBase32(ipv4Str, ipv6Str) {\n  return ipv4ToBase32(ipv4Str) + ipv6ToBase32(ipv6Str);\n}\n\n// 辅助函数，用于规范化IPv6地址（简化）\nfunction normalizeIPv6(ipStr) {\n  // 这是一个简化版本 - 在生产环境中，请使用适当的IPv6解析器\n  let expanded = ipStr;\n  \n  // 处理::压缩\n  if (expanded.includes('::')) {\n    const parts = expanded.split('::');\n    const left = parts[0] ? parts[0].split(':') : [];\n    const right = parts[1] ? parts[1].split(':') : [];\n    const missing = 8 - left.length - right.length;\n    const middle = Array(missing).fill('0');\n    expanded = [...left, ...middle, ...right].join(':');\n  }\n  \n  // 确保8组\n  const groups = expanded.split(':');\n  return groups\n    .map(g => g.padStart(4, '0'))\n    .join(':');\n}\n\n// 示例\nconst ipv4 = \"1.2.3.4\";\nconst ipv6 = \"2001:db8:85a3::8a2e:370:7334\";\n\nconsole.log(`IPv4 Base32: ${ipv4ToBase32(ipv4)}`);\nconsole.log(`IPv6 Base32: ${ipv6ToBase32(ipv6)}`);\nconsole.log(`双栈 Base32: ${dualStackToBase32(ipv4, ipv6)}`);\n",
    "typescriptExample": "// 在Node.js中需要'buffer'或在浏览器中需要Buffer polyfill\n\nfunction ipv4ToBase32(ipStr: string): string {\n  // 解析IP地址\n  const parts = ipStr.split('.');\n  if (parts.length !== 4) {\n    throw new Error('无效的IPv4地址');\n  }\n  \n  // 转换为字节\n  const bytes = new Uint8Array(4);\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = parseInt(parts[i], 10);\n  }\n  \n  // 编码为Base32\n  const encoded = Buffer.from(bytes).toString('base32');\n  \n  // 将填充替换为'8'\n  return encoded.replace(/=/g, '8');\n}\n\nfunction ipv6ToBase32(ipStr: string): string {\n  // 解析IPv6地址\n  // 这是一个简化版本 - 在生产环境中，请使用适当的IPv6解析器\n  const normalized = normalizeIPv6(ipStr);\n  const bytes = new Uint8Array(16);\n  \n  // 转换为字节（简化）\n  const groups = normalized.split(':');\n  for (let i = 0; i < 8; i++) {\n    const value = parseInt(groups[i], 16);\n    bytes[i * 2] = (value >> 8) & 0xff;\n    bytes[i * 2 + 1] = value & 0xff;\n  }\n  \n  // 编码为Base32\n  const encoded = Buffer.from(bytes).toString('base32');\n  \n  // 将填充替换为'8'\n  return encoded.replace(/=/g, '8');\n}\n\nfunction dualStackToBase32(ipv4Str: string, ipv6Str: string): string {\n  return ipv4ToBase32(ipv4Str) + ipv6ToBase32(ipv6Str);\n}\n\n// 辅助函数，用于规范化IPv6地址（简化）\nfunction normalizeIPv6(ipStr: string): string {\n  // 这是一个简化版本 - 在生产环境中，请使用适当的IPv6解析器\n  let expanded = ipStr;\n  \n  // 处理::压缩\n  if (expanded.includes('::')) {\n    const parts = expanded.split('::');\n    const left = parts[0] ? parts[0].split(':') : [];\n    const right = parts[1] ? parts[1].split(':') : [];\n    const missing = 8 - left.length - right.length;\n    const middle = Array(missing).fill('0');\n    expanded = [...left, ...middle, ...right].join(':');\n  }\n  \n  // 确保8组\n  const groups = expanded.split(':');\n  return groups\n    .map(g => g.padStart(4, '0'))\n    .join(':');\n}\n\n// 示例\nconst ipv4 = \"1.2.3.4\";\nconst ipv6 = \"2001:db8:85a3::8a2e:370:7334\";\n\nconsole.log(`IPv4 Base32: ${ipv4ToBase32(ipv4)}`);\nconsole.log(`IPv6 Base32: ${ipv6ToBase32(ipv6)}`);\nconsole.log(`双栈 Base32: ${dualStackToBase32(ipv4, ipv6)}`);\n",
    "goExample": "package main\n\nimport (\n\t\"encoding/base32\"\n\t\"fmt\"\n\t\"net\"\n\t\"strings\"\n)\n\n// IPv4ToBase32 将IPv4地址转换为Base32编码\nfunc IPv4ToBase32(ipStr string) (string, error) {\n\t// 解析IP地址\n\tip := net.ParseIP(ipStr)\n\tif ip == nil {\n\t\treturn \"\", fmt.Errorf(\"无效的IP地址: %s\", ipStr)\n\t}\n\t\n\t// 确保是IPv4地址\n\tipv4 := ip.To4()\n\tif ipv4 == nil {\n\t\treturn \"\", fmt.Errorf(\"不是IPv4地址: %s\", ipStr)\n\t}\n\t\n\t// 编码为Base32\n\tencoded := base32.StdEncoding.EncodeToString(ipv4)\n\t\n\t// 将填充替换为'8'\n\treturn strings.ReplaceAll(encoded, \"=\", \"8\"), nil\n}\n\n// IPv6ToBase32 将IPv6地址转换为Base32编码\nfunc IPv6ToBase32(ipStr string) (string, error) {\n\t// 解析IP地址\n\tip := net.ParseIP(ipStr)\n\tif ip == nil {\n\t\treturn \"\", fmt.Errorf(\"无效的IP地址: %s\", ipStr)\n\t}\n\t\n\t// 确保是IPv6地址\n\tipv6 := ip.To16()\n\tif ipv6 == nil || ip.To4() != nil {\n\t\treturn \"\", fmt.Errorf(\"不是IPv6地址: %s\", ipStr)\n\t}\n\t\n\t// 编码为Base32\n\tencoded := base32.StdEncoding.EncodeToString(ipv6)\n\t\n\t// 将填充替换为'8'\n\treturn strings.ReplaceAll(encoded, \"=\", \"8\"), nil\n}\n\n// DualStackToBase32 创建双栈Base32编码\nfunc DualStackToBase32(ipv4Str, ipv6Str string) (string, error) {\n\tipv4Encoded, err := IPv4ToBase32(ipv4Str)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\t\n\tipv6Encoded, err := IPv6ToBase32(ipv6Str)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\t\n\treturn ipv4Encoded + ipv6Encoded, nil\n}\n\nfunc main() {\n\tipv4 := \"1.2.3.4\"\n\tipv6 := \"2001:0db8:85a3::8a2e:370:7334\"\n\t\n\tipv4Encoded, _ := IPv4ToBase32(ipv4)\n\tipv6Encoded, _ := IPv6ToBase32(ipv6)\n\tdualStackEncoded, _ := DualStackToBase32(ipv4, ipv6)\n\t\n\tfmt.Printf(\"IPv4 Base32: %s\\n\", ipv4Encoded)\n\tfmt.Printf(\"IPv6 Base32: %s\\n\", ipv6Encoded)\n\tfmt.Printf(\"双栈 Base32: %s\\n\", dualStackEncoded)\n}",
    "javaExample": "import java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.Base64;\n\npublic class DNS2Base32 {\n\n    public static String ipv4ToBase32(String ipStr) throws UnknownHostException {\n        // 解析IP地址\n        InetAddress ip = InetAddress.getByName(ipStr);\n        \n        // 确保是IPv4地址\n        if (!(ip instanceof java.net.Inet4Address)) {\n            throw new IllegalArgumentException(\"不是IPv4地址: \" + ipStr);\n        }\n        \n        // 获取原始字节\n        byte[] ipBytes = ip.getAddress();\n        \n        // 编码为Base32\n        String encoded = Base64.getEncoder().encodeToString(ipBytes);\n        \n        // 将填充替换为'8'\n        return encoded.replace(\"=\", \"8\");\n    }\n    \n    public static String ipv6ToBase32(String ipStr) throws UnknownHostException {\n        // 解析IP地址\n        InetAddress ip = InetAddress.getByName(ipStr);\n        \n        // 确保是IPv6地址\n        if (!(ip instanceof java.net.Inet6Address)) {\n            throw new IllegalArgumentException(\"不是IPv6地址: \" + ipStr);\n        }\n        \n        // 获取原始字节\n        byte[] ipBytes = ip.getAddress();\n        \n        // 编码为Base32\n        String encoded = Base64.getEncoder().encodeToString(ipBytes);\n        \n        // 将填充替换为'8'\n        return encoded.replace(\"=\", \"8\");\n    }\n    \n    public static String dualStackToBase32(String ipv4Str, String ipv6Str) throws UnknownHostException {\n        return ipv4ToBase32(ipv4Str) + ipv6ToBase32(ipv6Str);\n    }\n    \n    public static void main(String[] args) {\n        try {\n            String ipv4 = \"1.2.3.4\";\n            String ipv6 = \"2001:0db8:85a3::8a2e:370:7334\";\n            \n            System.out.println(\"IPv4 Base32: \" + ipv4ToBase32(ipv4));\n            System.out.println(\"IPv6 Base32: \" + ipv6ToBase32(ipv6));\n            System.out.println(\"双栈 Base32: \" + dualStackToBase32(ipv4, ipv6));\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  "demo": {
    "title": "尝试DNS反射",
    "subtitle": "了解2DNS如何处理您的IP地址",
    "description": "输入IP地址并选择格式以生成DNS查询命令。",
    "ipLabel": "IP地址",
    "ipPlaceholder": "输入IPv4或IPv6地址",
    "formatLabel": "查询格式",
    "commandTypeLabel": "命令类型",
    "commandTypes": [
      { "id": "dig", "name": "dig" },
      { "id": "host", "name": "host" },
      { "id": "doh", "name": "DNS over HTTPS" }
    ],
    "doh": {
      "title": "DNS over HTTPS",
      "providerLabel": "DOH 提供商",
      "customEndpointLabel": "自定义端点",
      "customEndpointPlaceholder": "输入自定义DOH端点URL",
      "runButton": "运行查询",
      "loadingMessage": "正在运行查询...",
      "resultTitle": "DOH查询结果",
      "providers": [
        { "id": "cloudflare", "name": "Cloudflare" },
        { "id": "google", "name": "Google" },
        { "id": "custom", "name": "自定义" }
      ],
      "endpointLabel": "端点"
    },
    "formats": [
      { "id": "direct-ipv4", "name": "直接IPv4反射" },
      { "id": "ipv6-complete", "name": "IPv6完整格式" },
      { "id": "ipv6-omit", "name": "IPv6省略零格式" },
      { "id": "ipv6-z", "name": "IPv6使用'z'表示零组" },
      { "id": "base32-ipv4", "name": "Base32编码IPv4" },
      { "id": "base32-ipv6", "name": "Base32编码IPv6" },
      { "id": "dual-stack", "name": "双栈(IPv4 + IPv6)" }
    ],
    "generateButton": "生成DNS查询",
    "resultTitle": "DNS查询命令",
    "responseTitle": "预期响应",
    "copyButton": "复制",
    "copiedMessage": "已复制到剪贴板！",
    "instructions": {
      "title": "使用方法",
      "steps": [
        "输入IPv4或IPv6地址",
        "选择查询格式",
        "选择命令类型（dig、host或DNS over HTTPS）",
        "对于dig/host：点击'生成DNS查询'并复制命令",
        "对于DNS over HTTPS：选择提供商并点击'运行查询'直接查看结果"
      ]
    },
    "examples": {
      "title": "示例",
      "items": [
        {
          "format": "直接IPv4",
          "commands": {
            "dig": "dig 1.2.3.4.2dns.dev A",
            "host": "host -t A 1.2.3.4.2dns.dev",
            "doh": "使用Cloudflare DOH查询1.2.3.4.2dns.dev"
          },
          "response": "返回1.2.3.4作为A记录"
        },
        {
          "format": "IPv6完整格式",
          "commands": {
            "dig": "dig 2001-0db8-85a3-0000-0000-8a2e-0370-7334.2dns.dev AAAA",
            "host": "host -t AAAA 2001-0db8-85a3-0000-0000-8a2e-0370-7334.2dns.dev",
            "doh": "使用Cloudflare DOH查询2001-0db8-85a3-0000-0000-8a2e-0370-7334.2dns.dev"
          },
          "response": "返回2001:0db8:85a3:0000:0000:8a2e:0370:7334作为AAAA记录"
        },
        {
          "format": "IPv6省略零格式",
          "commands": {
            "dig": "dig 2001-db8-85a3-0-0-8a2e-370-7334.2dns.dev AAAA",
            "host": "host -t AAAA 2001-db8-85a3-0-0-8a2e-370-7334.2dns.dev",
            "doh": "使用Cloudflare DOH查询2001-db8-85a3-0-0-8a2e-370-7334.2dns.dev"
          },
          "response": "返回2001:0db8:85a3:0000:0000:8a2e:0370:7334作为AAAA记录"
        },
        {
          "format": "IPv6使用'z'表示零组",
          "commands": {
            "dig": "dig 2001-db8-85a3-z-8a2e-370-7334.2dns.dev AAAA",
            "host": "host -t AAAA 2001-db8-85a3-z-8a2e-370-7334.2dns.dev",
            "doh": "使用Cloudflare DOH查询2001-db8-85a3-z-8a2e-370-7334.2dns.dev"
          },
          "response": "返回2001:0db8:85a3:0000:0000:8a2e:0370:7334作为AAAA记录"
        },
        {
          "format": "Base32编码IPv4",
          "commands": {
            "dig": "dig AEBAGBA8.2dns.dev A",
            "host": "host -t A AEBAGBA8.2dns.dev",
            "doh": "使用Cloudflare DOH查询AEBAGBA8.2dns.dev"
          },
          "response": "返回1.2.3.4作为A记录"
        },
        {
          "format": "Base32编码IPv6",
          "commands": {
            "dig": "dig EAAQ3OEFUMAAAAAARIXAG4DTGQ888888.2dns.dev AAAA",
            "host": "host -t AAAA EAAQ3OEFUMAAAAAARIXAG4DTGQ888888.2dns.dev",
            "doh": "使用Cloudflare DOH查询EAAQ3OEFUMAAAAAARIXAG4DTGQ888888.2dns.dev"
          },
          "response": "返回2001:0db8:85a3:0000:0000:8a2e:0370:7334作为AAAA记录"
        },
        {
          "format": "双栈(IPv4 + IPv6)",
          "commands": {
            "dig": "dig AEBAGBA8EAAQ3OEFUMAAAAAARIXAG4DTGQ888888.2dns.dev A+AAAA",
            "host": "host -t A+AAAA AEBAGBA8EAAQ3OEFUMAAAAAARIXAG4DTGQ888888.2dns.dev",
            "doh": "使用Cloudflare DOH查询AEBAGBA8EAAQ3OEFUMAAAAAARIXAG4DTGQ888888.2dns.dev"
          },
          "response": "返回1.2.3.4作为A记录和2001:0db8:85a3:0000:0000:8a2e:0370:7334作为AAAA记录"
        }
      ]
    }
  },
  "testimonials": {
    "title": "用户评价",
    "subtitle": "全球开发者的信任之选",
    "list": [
      {
        "quote": "2DNS简化了我们的网络诊断和服务发现。一个出色的工具！",
        "author": "张三",
        "role": "网络工程师"
      },
      {
        "quote": "我们在物联网设备发现中使用2DNS，在IPv4和IPv6网络上运行非常流畅。",
        "author": "李四",
        "role": "物联网开发者"
      },
      {
        "quote": "多种编码格式非常巧妙。完美适用于我们的混合网络环境。",
        "author": "王五",
        "role": "系统管理员"
      }
    ]
  },
  "pricing": {
    "title": "价格方案",
    "subtitle": "简单透明的价格",
    "plans": [
      {
        "name": "免费版",
        "price": "¥0",
        "period": "永久",
        "description": "适用于个人项目和小型团队",
        "features": ["公共2dns.dev服务", "所有编码格式", "社区支持"],
        "cta": "立即开始"
      },
      {
        "name": "专业版",
        "price": "¥129",
        "period": "每月",
        "description": "适用于成长中的团队和企业",
        "features": ["私有DNS反射服务器", "自定义域名支持", "优先支持", "高级分析"],
        "cta": "开始免费试用"
      },
      {
        "name": "企业版",
        "price": "定制",
        "period": "",
        "description": "适用于有定制需求的大型组织",
        "features": ["多个私有实例", "自定义编码格式", "专属支持", "定制集成", "SLA保障"],
        "cta": "联系销售"
      }
    ]
  },
  "cta": {
    "title": "准备好开始了吗？",
    "description": "加入全球开发者的行列，使用2DNS进行网络应用、诊断和服务发现。",
    "primaryButton": "立即尝试",
    "secondaryButton": "联系我们"
  },
  "footer": {
    "rights": "保留所有权利。",
    "privacy": "隐私政策",
    "terms": "服务条款"
  }
}
